#!/usr/bin/env perl

use FindBin qw/$Bin/;
use Modern::Perl '2015';
use experimental qw/signatures/;
use autodie;
use Parallel::ForkManager;
use Pod::Usage;
use Getopt::Lucid qw/:all/;


chomp(my $cpu_count = `grep -c -P "^processor\\s+:" /proc/cpuinfo`);

my @specs = (
    Param("megan|m")->default("/usr/local/bin/MEGAN"),
    Param("meganLicense|l")->default("/data/misc/MEGAN5-academic-license.txt"),
    Switch("format|f")->default(0),
    Param("outputDIR|o")->default("/data/out"),
    Param("contigs|c")->default("/data/contigs"),
    Param("refseqKO|r")->default("/data/refSeqProtDB"),
    Param("threads|t")->default($cpu_count),
    Param("prefix|p"),
    Switch("help|h"),
    Param("windowSize|w")->default(200)
);

my $opt = Getopt::Lucid->getopt( \@specs );
pod2usage(-verbose=>2) if $opt->get_help;

my $path_to_makeblastdb = qx(which makeblastdb);
unless ($path_to_makeblastdb) { die "\nERROR: makeblastdb not found"; }

my $path_to_blastx = qx(which blastx);
unless ($path_to_blastx) { die "\nERROR: blastx not found"; }

my $path_to_muscle = qx(which muscle);
unless ($path_to_muscle) { die "\nERROR: muscle not found"; }

$opt->validate({'requires' => ['refseqKO','outputDIR','contigs']}); #dun chain, else help wont print

my $outputDir     = $opt->get_outputDIR;
my $refseqProtDB  = $opt->get_refseqKO;
my $MAX_PROCESSES = $opt->get_threads;
my $toFormat      = $opt->get_format;
my $contigDir     = $opt->get_contigs;
my $meganPath     = $opt->get_megan;
my $meganLicense  = $opt->get_meganLicense;

`mkdir $outputDir` unless -d $outputDir;

say "## Using $MAX_PROCESSES threads";

say "## Blasting"; ##################################################
$toFormat ?
`$Bin/pAss.00.blast.pl --threads $MAX_PROCESSES --kodb $refseqProtDB --output $outputDir/pAss00 --format $toFormat --contigs $contigDir`:
`$Bin/pAss.00.blast.pl --threads $MAX_PROCESSES --kodb $refseqProtDB --output $outputDir/pAss00 --contigs $contigDir`;

say "MEGAN aln"; ##################################################
my $pm0 = Parallel::ForkManager->new($MAX_PROCESSES);
foreach my $ko (`ls $outputDir/pAss00/ | sed s/\.blastx//`)
{   chomp $ko;
    $pm0->start and next;
    say "Processing $ko";
    `mkdir -p $outputDir/pAss01/$ko` unless -d '$outputDir/pAss01/$ko';
    `$Bin/pAss.01.msa.pl --queryFasta $contigDir/$ko/454AllContigs.fna --blastFile $outputDir/pAss00/$ko.blastx --megan $meganPath --meganLicense $meganLicense --output $outputDir/pAss01/$ko`;
    $pm0->finish;
}
$pm0->wait_all_children;

say "## Generating MSA"; ##################################################
my $pm = Parallel::ForkManager->new($MAX_PROCESSES);
foreach my $ko (`ls $outputDir/pAss01/ | grep -v log`) #need to change this; this is hard coded
{   chomp $ko;
    $pm->start and next;
    `$Bin/pAss.03.master.msa.pl --refseqFasta $refseqProtDB/ko:$ko --msadir $outputDir/pAss01/$ko --out $outputDir/pAss03 --ko $ko`;
    $pm->finish;
}
$pm->wait_all_children;

say "## MSA Diagnostics"; #################################################
`mkdir $outputDir/pAss04` unless -d '$outputDir/pAss04';
`mkdir $outputDir/pAss10` unless -d '$outputDir/pAss10';

my $pm3 = Parallel::ForkManager->new($MAX_PROCESSES);
foreach my $ko (`ls $outputDir/pAss03/ | grep -v temp | sed s/\.msa//g`)
{
    chomp $ko;
    $pm3->start and next;
    `$Bin/pAss.04.msa2group.pl --msa $outputDir/pAss03/$ko.msa --outputPrefix $outputDir/pAss04/$ko`;
    `$Bin/pAss.10.maxDiversity.pl --minLength 200 --inputFile $outputDir/pAss03/$ko.msa --outputDir $outputDir/pAss10/$ko`;
    $pm3->finish;
}
$pm3->wait_all_children;

say "## Output MaxDiveristy Region";
    `mkdir $outputDir/pAss11`;
my $pm4 = Parallel::ForkManager->new($MAX_PROCESSES);
foreach my $ko (`ls $outputDir/pAss10/`)
{
    chomp $ko;
    $pm4->start and next;
    `$Bin/pAss.11.best.window.r $outputDir/pAss10/$ko/$ko $outputDir/pAss03/$ko.msa $outputDir/pAss11/ $contigDir/$ko/454AllContigs.fna`;
    $pm4->finish;
}
$pm4->wait_all_children;

#Documentation
=pod

=head1 NAME

    maxDiversity

=head1 DESCRIPTION

    ProteinMSA-guided Gene-Centric analyses of highly complex communities using Metagenomics

=head2 Prerequisites

    Before running maxDiversity the following is required:

=over 4

=item Ortholog's Protein Reference Sequences

    Prokaryotic sequences only,  grouped by KOs (eg. K00001.fa, K00002.fa)
    See DESCRIPTION for folder structure with flag


=item PreAssembled Contigs

    Currenly on the assembler NEWBLER is supported
    See folder structure:

=item Blast

    brew install homebrew/science/blast

=back

=head1 OPTIONS

=over 4

=item --megan, -m

    File path pointing to MEGAN executable. Defaults to $HOME/local/bin/MEGAN
    Requires MEGAN version 5

=item --lic , -l

    File Path poining to the MEGAN5 academic license

=item --contigs, -c

    the path to dir containing contigs fna files eg. $HOME/out/assm.0200.newbler

        data/contigs/
        |-- K00001
        |   `-- 454AllContigs.fna
        |-- K00002
        |   `-- 454AllContigs.fna
        |-- K00003
        |   `-- 454AllContigs.fna
        |-- K00004
        |   `-- 454AllContigs.fna
        |-- K00005
        |   `-- 454AllContigs.fna
        |-- K00007
        |   `-- 454AllContigs.fna
        |-- K00008
        |   `-- 454AllContigs.fna
        |-- K00009
        |   `-- 454AllContigs.fna
        |-- K00010
        |   `-- 454AllContigs.fna
        `-- K00011
            `-- 454AllContigs.fna`

=item --format, -f

    Switch for running formatdb / makeblastdb (for times when you need to rerun the pipeline and do not wish to rerun this step)

=item --refseqKO, -r


    example/refSeqProtDB/
        ├── ko:K00001
        ├── ko:K00002
        ├── ko:K00003
        ├── ko:K00004
        ├── ko:K00005
        ├── ko:K00007
        ├── ko:K00008
        ├── ko:K00009
        ├── ko:K00010
        └── ko:K00011

    Filenames ko:KXXXXX

        >gi|510880287|ref|YP_008052955.1| alcohol dehydrogenase [Salinarchaeum sp. Harcht-Bsk1]
        MRAAVLEAHGEPLSVQEVDYPEPGPEQVVVETEACGICRSDWHAWRGDWEWMGISPSPGQILGHEPAGVVSEVGDEIESL
        SEGDRVTVPFHLGDGTCPYCRNGHSNVCETSVPLGFIGAAQGAYAEAFPVRKADFNVTKLPDSVDFTEMAALGCRFMTAY
        HGLTDRAGLRPGDTVAIHGCGGVGLSAVHIADALGAVPIAVDVQESKLDRARELGAAATINGAEVDDVPGEVFRANDGNG
        ADVSVDALGIEETCGNAVRSLGKTGTHVQIGLSEGDTGGQLSVPVDQMTLQEIDFHGSYGMPLVRYDELFTLIERCTLQP
        EKIVGETLSLEDAPETLASMDDYETIGIPVITEF

=item --threads, -t

    the number of threads to use

=item --prefix, -p

    the location for all the intermediate files (not used)

=item --outputDIR, -o

    the location for all the intermediate files (not used)

=item --windowSize -w

    the size of the window when looking for a maxDiversity region

=item --help

    throws up the help message

=back

=cut
